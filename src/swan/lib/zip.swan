global function zip (...seqs){
let zipper 
if seqs.length==0: return ()
else if !(seqs[-1] is Iterable) {
zipper = seqs[-1]
seqs = seqs[0..-1]
}
else zipper = def(...x): x
return def*{
var iterators = [], values = []
for seq in seqs { iterators.push(seq.iterator); values.push(undefined); }
while true {
for i in 0..iterators.length {
if (values[i] = iterators[i].next) is undefined: return
}
yield zipper(...values)
}
}
}
